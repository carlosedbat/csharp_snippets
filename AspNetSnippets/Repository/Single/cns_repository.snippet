<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Create New Simple Repository</Title>
      <Shortcut>cns_repository</Shortcut>
      <Description>Cria classe CRUD básica do Repository</Description>
      <Author>Carlos Eduardo Batista</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>param1</ID> <!-- Identificador único para um campo editável -->
          <Default>ClassName</Default> <!-- Valor padrão para o campo -->
        </Literal>
        <Literal>
            <ID>param2</ID> <!-- Identificador único para um campo editável -->
            <Default>newParameter</Default> <!-- Valor padrão para o campo -->
        </Literal>
      </Declarations>
      <Code Language="csharp">
                <![CDATA[
                public class $param1$Repository : I$param1$Repository
                {
                    private readonly AppDbContext _appDbContext;

                    public $param1$Repository(AppDbContext appDbContext)
                    {
                        this._appDbContext = appDbContext;
                    }

                    public async Task<int> GetQuantityOf$param1$($param1$ $param2$Filter)
                    {
                        IQueryable<$param1$> query = this._appDbContext.$param1$;

                        query = new $param1$FilterBuilder(query)
                        .FilterByTestType($param2$Filter.TestType)
                        .Build();

                        return await query.CountAsync();
                    }

                    public async Task<List<$param1$>> List($param1$ $param2$Filter, int pageIndex, int itensByPage)
                    {
                        IQueryable<$param1$> query = this._appDbContext.$param1$;

                        query = this.IncludeSubmembers(query);
                        query = new $param1$FilterBuilder(query)
                                    .FilterByTestType($param2$Filter.TestType)
                                    .Build();

                        if (pageIndex <= 0)
                        {
                            pageIndex = ApplicationDefaultConfiguration.DefaultPageIndex();
                        }

                        int previousIndex = (int)MathBasic.SubtractNumbers(pageIndex, 1);

                        int skipedItens = (int)MathBasic.MultiplyNumbers(previousIndex, itensByPage);

                        return await query.Skip(skipedItens).Take(itensByPage).ToListAsync();
                    }

                    public async Task<$param1$> Read(Guid id)
                    {
                        IQueryable<$param1$> query = this._appDbContext.$param1$;

                        query = this.IncludeSubmembers(query);

                        return await query.FirstOrDefaultAsync(t => t.Id == id);
                    }

                    public async Task<$param1$> Update($param1$ current$param1$, $param1$ new$param1$)
                    {
                        this._appDbContext.Entry(current$param1$).CurrentValues.SetValues(new$param1$);

                        return new$param1$;
                    }

                    private IQueryable<$param1$> IncludeSubmembers(IQueryable<$param1$> query)
                    {
                        return query;
                    }
                }
                ]]>
            </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>