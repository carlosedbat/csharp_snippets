<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Create New Full Repository</Title>
      <Shortcut>cnf_repository</Shortcut>
      <Description>Cria classe CRUD completa da Repository</Description>
      <Author>Carlos Eduardo Batista</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>param1</ID> <!-- Identificador único para um campo editável -->
          <Default>ClassName</Default> <!-- Valor padrão para o campo -->
        </Literal>
        <Literal>
            <ID>param2</ID> <!-- Identificador único para um campo editável -->
            <Default>newParameter</Default> <!-- Valor padrão para o campo -->
          </Literal>
      </Declarations>
      <Code Language="csharp">
                <![CDATA[
                public class $param1$Repository : I$param1$Repository
{
    private AppDbContext _appDbContext;

    public $param1$Repository(AppDbContext appDbContext) 
    {
        this._appDbContext = appDbContext;
    }

    public async Task<$param1$> Create($param1$ new$param1$)
        {
            EntityEntry<$param1$> created$param1$ = await this._appDbContext.$param1$.AddAsync(new$param1$);

            return created$param1$.Entity;
        }

    public async Task<$param1$> Delete(Guid $param2$Id)
    {
        $param1$? $param2$ = await this._appDbContext.$param1$.FirstOrDefaultAsync(x => x.Id == $param2$Id);

        if ($param2$ is not null)
        {
            this._appDbContext.$param1$.Remove($param2$);
        }

        return $param2$;
    }

    public async Task<List<$param1$>> List($param1$ $param2$Filter)
        {
            IQueryable<$param1$> query = this._appDbContext.$param1$.AsNoTracking();

            query = new $param1$FilterBuilder(query)
                        .Build();

            return await query.ToListAsync();
        }

    public async Task<$param1$> Read(Guid $param2$Id)
    {
        $param1$ $param2$ = await this._appDbContext.$param1$.AsNoTracking().FirstOrDefaultAsync(x => x.Id == $param2$Id);

            if ($param2$  != null)
            {
                _appDbContext.Entry($param2$).State = EntityState.Detached;
            }

            return $param2$;
    }

    public async Task<$param1$> Update(Guid $param2$Id, $param1$ new$param1$)
    {
            var $param2$ToUpdate = await _appDbContext.$param1$
                .FirstAsync(e => e.Id == $param2$Id);
            if ($param2$ToUpdate == null)
            {
                throw new InvalidOperationException($param1$ErrorsConst.$param1$NotFoundError);
            }

            _appDbContext.Entry($param2$ToUpdate).CurrentValues.SetValues(new$param1$);

            return $param2$ToUpdate;
    }
}
                ]]>
            </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>