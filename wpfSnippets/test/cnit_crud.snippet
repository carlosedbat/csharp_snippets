<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Create New Itegration Crud Test Basic</Title>
      <Shortcut>cnit_crud</Shortcut>
      <Description>Cria um teste de integração CRUD basico</Description>
      <Author>Carlos Eduardo Batista</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>param1</ID> <!-- Identificador único para um campo editável -->
          <Default>ClassName</Default> <!-- Valor padrão para o campo -->
        </Literal>
        <Literal>
            <ID>param2</ID> <!-- Identificador único para um campo editável -->
            <Default>newParameter</Default> <!-- Valor padrão para o campo -->
          </Literal>
      </Declarations>
      <Code Language="csharp">
                <![CDATA[
                public class $param1$PresenterIntegrationTest : IntegrationTestBase
                {
                    private readonly $param1$Model _$param2$Model;
                    private readonly $param1$Presenter _$param2$Presenter;
            
                    public $param1$PresenterIntegrationTest()
                    {
                        _$param2$Model = new $param1$Model(new $param1$Repository(DbContext), Mapper);
                        _$param2$Presenter = new $param1$Presenter(_$param2$Model, new WorkUnit(DbContext));
                    }
            
                    [Theory]
                    [MemberData(nameof($param1$TestData.Get$param1$s), MemberType = typeof($param1$TestData))]
                    public async Task Create_ShouldPersistData_When$param1$IsCreated($param1$DTO $param2$DTO)
                    {
                        var result = await _$param2$Presenter.Create($param2$DTO);
            
                        Assert.NotNull(result);
                        Assert.IsType<$param1$DTO>(result);
                        Assert.Equal($param2$DTO.CompanyName, result.CompanyName);
            
                        var persisted$param1$ = await DbContext.$param1$.FindAsync(result.Id);
                        Assert.NotNull(persisted$param1$);
                        Assert.Equal($param2$DTO.CompanyName, persisted$param1$.CompanyName);
                    }
            
                    [Theory]
                    [MemberData(nameof($param1$TestData.Get$param1$s), MemberType = typeof($param1$TestData))]
                    public async Task Create_ShouldThrowAnException_When$param1$CnpjIsNull($param1$DTO $param2$DTO)
                    {
                        $param2$DTO.Cnpj = null;
            
                        var exception = await Assert.ThrowsAsync<ValidationException>(() => _$param2$Presenter.Create($param2$DTO));
            
                        Assert.Equal($param1$ErrorsConst.CnpjNullOrVoidError, exception.Message);
                    }
            
                    [Theory]
                    [MemberData(nameof($param1$TestData.Get$param1$s), MemberType = typeof($param1$TestData))]
                    public async Task Delete_ShouldRemoveData_When$param1$IsDeleted($param1$DTO $param2$DTO)
                    {
                        var created$param1$ = await _$param2$Presenter.Create($param2$DTO);
            
                        var result = await _$param2$Presenter.Delete(created$param1$.Id);
            
                        Assert.NotNull(result);
                        Assert.IsType<$param1$DTO>(result);
                        Assert.Equal(created$param1$.CompanyName, result.CompanyName);
            
                        var deleted$param1$ = await DbContext.$param1$.FindAsync(result.Id);
                        Assert.Null(deleted$param1$);
                    }
            
                    [Theory]
                    [MemberData(nameof($param1$TestData.Get$param1$s), MemberType = typeof($param1$TestData))]
                    public async Task List_ShouldReturnAll$param1$s($param1$DTO $param2$DTO)
                    {
                        var $param2$DTO1 = new $param1$DTO
                        {
                            CompanyName = $param1$DTO.CompanyName,
                            FantasyName = "NewFantasyName",
                            Cnpj = $param2$DTO.Cnpj,
                            Image = $param2$DTO.Image
                        };
            
                        var $param2$DTO2 = new $param1$DTO
                        {
                            CompanyName = $param2$DTO.CompanyName,
                            FantasyName = $param2$DTO.FantasyName,
                            Cnpj = $param2$DTO.Cnpj,
                            Image = $param2$DTO.Image
                        };
            
                        await _$param2$Presenter.Create($param2$DTO1);
                        await _$param2$Presenter.Create($param2$DTO2);
            
                        var result = await _$param2$Presenter.List(new $param1$DTO());
            
                        Assert.NotNull(result);
                        Assert.IsType<List<$param1$DTO>>(result);
                        Assert.Equal(2, result.Count);
                    }
            
                    [Theory]
                    [MemberData(nameof($param1$TestData.Get$param1$s), MemberType = typeof($param1$TestData))]
                    public async Task Read_ShouldReturn$param1$_When$param1$IsRead($param1$DTO $param2$DTO)
                    {
                        var created$param1$ = await _$param2$Presenter.Create($param2$DTO);
            
                        var result = await _$param2$Presenter.Read(created$param1$.Id);
            
                        Assert.NotNull(result);
                        Assert.IsType<$param1$DTO>(result);
                        Assert.Equal(created$param1$.CompanyName, result.CompanyName);
                    }
            
                    [Theory]
                    [MemberData(nameof($param1$TestData.Get$param1$s), MemberType = typeof($param1$TestData))]
                    public async Task Update_ShouldPersistChanges_When$param1$IsUpdated($param1$DTO $param2$DTO)
                    {
                        var created$param1$ = await _$param2$Presenter.Create($param2$DTO);
            
                        Assert.NotNull(created$param1$);
                        Assert.IsType<$param1$DTO>(created$param1$);
                        Assert.Equal($param2$DTO.CompanyName, created$param1$.CompanyName);
            
                        created$param1$.CompanyName = "Updated Company";
            
                        var result = await _$param2$Presenter.Update(created$param1$);
            
                        Assert.NotNull(result);
                        Assert.IsType<$param1$DTO>(result);
                        Assert.Equal("Updated Company", result.CompanyName);
            
                        var updated$param1$ = await _$param2$Presenter.Read(result.Id);
                        Assert.NotNull(updated$param1$);
                        Assert.Equal("Updated Company", updated$param1$.CompanyName);
                    }
                }
                ]]>
            </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>